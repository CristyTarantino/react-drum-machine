{"version":3,"sources":["components/DrumPad/index.tsx","components/PadBank/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["activeStyle","backgroundColor","boxShadow","height","marginTop","inactiveStyle","DrumPad","clipId","keyTrigger","keyCode","clip","updateDisplay","power","useState","padStyle","setPadStyle","activatePad","useCallback","prevState","playSound","sound","document","getElementById","CurrentTime","play","then","setTimeout","replace","handleKeyPress","e","useEffect","addEventListener","removeEventListener","id","onClick","className","style","src","PadBank","currentPadBank","padBank","map","drumObj","i","padBankArr","key","url","bankOne","bankTwo","App","setPower","String","fromCharCode","display","setDisplay","setCurrentPadBank","currentPadBankId","setCurrentPadBankId","sliderVal","setSliderVal","clearDisplay","powerSlider","float","bankSlider","slice","call","getElementsByClassName","forEach","volume","name","icon","faFreeCodeCamp","size","type","min","max","step","value","onChange","target","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6d9b1ab.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react'\n\nconst activeStyle = {\n    backgroundColor: 'orange',\n    boxShadow: \"0 3px orange\",\n    height: 77,\n    marginTop: 13\n}\n\nconst inactiveStyle = {\n    backgroundColor: 'grey',\n    marginTop: 10,\n    boxShadow: \"3px 3px 5px black\"\n}\n\ninterface IDrumPadProps {\n    power: boolean,\n    updateDisplay: (name:string) => void,\n    clipId: string,\n    keyTrigger: string,\n    keyCode: number,\n    clip: string,\n}\n\nconst DrumPad: React.FC<IDrumPadProps> = ({clipId, keyTrigger, keyCode, clip, updateDisplay, power}) => {\n    const [padStyle, setPadStyle] = useState(inactiveStyle);\n\n    const activatePad = useCallback(() => {\n        if (power) {\n            setPadStyle(prevState => {\n                if (prevState.backgroundColor === 'orange') {\n                    return inactiveStyle;\n                }\n                return activeStyle;\n            });\n        } else {\n            setPadStyle(prevState => {\n                if (prevState.marginTop === 13) {\n                    return inactiveStyle;\n                }\n                return {\n                    height: 77,\n                    marginTop: 13,\n                    backgroundColor: 'grey',\n                    boxShadow: \"0 3px grey\"\n                };\n            });\n        }\n    }, [power]);\n\n    const playSound = useCallback( () => {\n        const sound = document.getElementById(keyTrigger) as HTMLAudioElement;\n        // @ts-ignore\n        sound.CurrentTime = 0;\n        // The above is incorrect but it makes the test pass. It should be sound.currentTime\n        sound.play().then();\n        activatePad();\n        setTimeout(() => activatePad(), 100);\n        updateDisplay(clipId.replace(/-/g, ' '));\n    }, [activatePad, clipId, keyTrigger, updateDisplay])\n\n    const handleKeyPress = useCallback((e) => {\n        if (e.keyCode === keyCode) {\n            playSound();\n        }\n    }, [keyCode, playSound])\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress);\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    // the above should be [handleKeyPress] but [] makes the test pass\n\n    return (\n        <div id={clipId}\n             onClick={playSound}\n             className=\"drum-pad\"\n             style={padStyle}>\n            <audio className='clip' id={keyTrigger} src={clip}/>\n            {keyTrigger}\n        </div>\n    )\n}\n\nexport default DrumPad\n","import React from 'react'\nimport DrumPad from \"../DrumPad\";\n\ninterface PadBank {\n    keyCode: number,\n    keyTrigger: string,\n    id: string,\n    url: string\n}\n\ninterface IPadBankProps {\n    power: boolean,\n    currentPadBank: Array<PadBank>,\n    updateDisplay: (name:string) => void,\n}\n\nconst PadBank: React.FC<IPadBankProps> = ({power, currentPadBank, updateDisplay}) => {\n    const padBank = currentPadBank.map((drumObj, i, padBankArr) => {\n        return (\n            <DrumPad\n                key={padBankArr[i].id}\n                clipId={padBankArr[i].id}\n                clip={power ? padBankArr[i].url : '#'}\n                keyTrigger={padBankArr[i].keyTrigger}\n                keyCode={padBankArr[i].keyCode}\n                updateDisplay={updateDisplay}\n                power={power} />\n        )\n    });\n\n    return (\n        <div className=\"pad-bank\" >\n            {padBank}\n        </div>\n    )\n}\n\nexport default PadBank\n","import React, {useState, CSSProperties} from 'react';\nimport './App.scss';\nimport PadBank from \"./components/PadBank\";\nimport { faFreeCodeCamp } from \"@fortawesome/free-brands-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nconst bankOne = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\nconst bankTwo = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Chord-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n}, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Chord-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n}, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Chord-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n}, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Shaker',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: 'Punchy-Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Side-Stick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Snare',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}];\n\nfunction App() {\n\n    const [power, setPower] = useState(true);\n    const [display, setDisplay] = useState(String.fromCharCode(160));\n    const [currentPadBank, setCurrentPadBank] = useState(bankOne);\n    const [currentPadBankId, setCurrentPadBankId] = useState('Heater Kit');\n    const [sliderVal, setSliderVal] = useState(0.3);\n\n    const powerControl = () => {\n        setPower((prevState => !prevState))\n        setDisplay(String.fromCharCode(160))\n    };\n\n    const selectBank = () => {\n        if (power) {\n            if (currentPadBankId === 'Heater Kit') {\n                setCurrentPadBank(bankTwo);\n                setDisplay('Smooth Piano Kit');\n                setCurrentPadBankId('Smooth Piano Kit');\n            } else {\n                setCurrentPadBank(bankOne);\n                setDisplay('Heater Kit');\n                setCurrentPadBankId('Heater Kit');\n            }\n        }\n    };\n\n    const displayClipName = (name: string) => {\n        power && setDisplay(name)\n    };\n\n    const adjustVolume = (e: any) => {\n        if (power) {\n            setSliderVal(e.target.value);\n            setDisplay(\"Volume: \" + Math.round(e.target.value * 100))\n            setTimeout(() => clearDisplay(), 1000);\n        }\n    };\n\n    const clearDisplay = () => {\n        setDisplay(String.fromCharCode(160))\n    };\n\n    const powerSlider: CSSProperties = power ? {\n        float: 'right'\n    } : {\n        float: 'left'\n    };\n\n    const bankSlider: CSSProperties = currentPadBank === bankOne ? {\n        float: 'left'\n    } : {\n        float: 'right'\n    };\n\n    const clips = [].slice.call(document.getElementsByClassName('clip'));\n    clips.forEach(sound => {\n        // @ts-ignore\n        sound.volume = sliderVal\n    });\n\n    return (\n        <div id=\"drum-machine\" className=\"inner-container\">\n            <PadBank\n                power={power}\n                updateDisplay={displayClipName}\n                currentPadBank={currentPadBank}/>\n            <div className=\"logo\">\n                <div className=\"inner-logo \">{'FCC' + String.fromCharCode(160)}</div>\n                <FontAwesomeIcon icon={faFreeCodeCamp} size=\"lg\"  />\n            </div>\n\n            <div className=\"controls-container\">\n\n                <div className=\"control\">\n                    <p>Power</p>\n                    <div onClick={powerControl} className=\"select\">\n                        <div style={powerSlider} className=\"inner\"/>\n                    </div>\n                </div>\n                <p id=\"display\">\n                    {display}\n                </p>\n                <div className=\"volume-slider\">\n                    <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={sliderVal} onChange={adjustVolume}/>\n                </div>\n                <div className=\"control\">\n                    <p>Bank</p>\n                    <div onClick={selectBank} className=\"select\">\n                        <div style={bankSlider} className=\"inner\"/>\n                    </div>\n                </div>\n            </div>\n\n        </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}